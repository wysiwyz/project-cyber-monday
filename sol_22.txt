ls -la /opt/course/22/files
# Found 3 Dockerfiles and 7 K8s resource yaml manifests. You should familiarize yourself with the best practices, links in README.md.

# Delete secret token, use for example variable passed to Docker, because every `RUN`, `COPY`, `ADD' command creates a new layer. Every layer is persistent in the image.
# To avoid image still being in cluded with the image in layer X and layer Y.

cat /opt/course/22/files/Dockerfile-mysql
FROM ubuntu

# Add MySQL configuration
COPY my.cnf /etc/mysql/conf.d/my.cnf
COPY mysqld_charset.cnf /etc/mysql/conf.d/mysqld_charset.cnf

RUN apt-get update && \
    apt-get -yq install mysql-server-5.6 &&

# Add MySQL scripts
COPY import_sql.sh /import_sql.sh
COPY run.sh /run.sh

# Configure credentials
COPY secret-token .                                       # LAYER X
RUN /etc/register.sh ./secret-token                       # LAYER Y
RUN rm ./secret-token # delete secret token again         # LATER Z

EXPOSE 3306
CMD ["/run.sh"]

echo Dockerfile-mysql >> /opt/course/22/security-issues

---

# In the container command, echoing secrets could be directly read by any user having access to the logs.

cat /opt/course/22/files/deployment-redis.yaml
...
    spec:
      containers:
      - name: mycontainer
        image: redis
        command: ["/bin/sh"]
        args:
        - "-c"
        - "echo $SECRET_USERNAME && echo $SECRET_PASSWORD && docker-entrypoint.sh" # NOT GOOD

echo deployment-redis.yaml >> /opt/course/22/security-issues

---

# In file statefulset-nginx.yaml file, it's not good to expose the password directly in the environment variable definition of the container.
cat /opt/course/22/files/statefulset-nginx.yaml
...
spec:
  template:
    spec:
      containers:
      - name: nginx
        env: 
        - name: password
          value: MyDiReCtP@sSwOrd  # NOT GOOD

echo statefulset-nginx.yaml >> /opt/course/22/security-issues
cat /opt/course/22/security-issues
Dockerfile-mysql
deployment-redis.yaml
statefulset-nginx.yaml